const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { User } = require('../modules/modules');
const ApiError = require("../error/apiError")
require('dotenv').config(); 

const generateJwt = (id, email, role) => {
    return jwt.sign(
        { id, email, role },
        process.env.SECRET_KEY
    );
};

class UserController {
    async registration(req, res, next) {
        try {
            console.log("‚úÖ POST /api/user/registration", req.body);
            const { email, password, role, name } = req.body;

            if (!email || !password || !name) {
                console.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email, password –∏–ª–∏ name");
                return next(ApiError.badRequest("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ password"));
            }

            console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
            const existingUser = await User.findOne({ where: { email } });
            if (existingUser) {
                console.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", existingUser.email);
                return next(ApiError.badRequest("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"));
            }

            console.log("üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...");
            const salt = await bcrypt.genSalt(10);
            const hashPassword = await bcrypt.hash(password, salt);

            console.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
            const user = await User.create({ email, role, name, password: hashPassword });
            console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", user.id);

            if (!process.env.SECRET_KEY) {
                console.error("‚ùå SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
                return next(ApiError.internal("SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"));
            }

            console.log("üîè –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT...");
            const token = generateJwt(user.id, user.email, user.role);

            console.log("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            return res.json({ token, name });
        } catch (error) {
            console.error("üî• –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
            return next(ApiError.internal("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"));
        }
    }

    async login(req, res, next) {
        const {email, password} = req.body
        const user = await User.findOne({where:{email}})
        if(!user) {
            return next(ApiError.internal("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
        } 
        let comparePassword = bcrypt.compareSync(password, user.password)
        if(!comparePassword) {
            return next(ApiError.internal("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"))
        }
        const token = generateJwt(user.id, user.email, user.role)
        return res.json({token})

    }

    async check(req, res, next) {
        const token = generateJwt(req.user.id, req.user.email, req.user.role) 
        return res.json({token})
    }
}

module.exports = new UserController()